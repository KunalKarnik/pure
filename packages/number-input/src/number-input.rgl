<template>
	<div
		class="pure-number-input { block ? 'is-block' : '' } { class }"
	>
		<div
			class="pure-number-input__action is-increase { disabled || isSubtractDisabled ? 'is-disabled' : '' }"
			on-click="{ this.onSubtract() }"
		>-</div>

		<input
			ref="input"
			class="pure-number-input__input { disabled ? 'is-disabled' : '' }"
			value="{ @(value) }"
			type="number"
			disabled="{ disabled }"
			on-input="{ this.onInput() }"
		>

		<div
			class="pure-number-input__action is-decrease { disabled || isAddDisabled ? 'is-disabled' : '' }"
			on-click="{ this.onAdd() }"
		>+</div>
	</div>
</template>

<script>
	export default {
		computed: {
			isAddDisabled() {
				const max = this.data.max;
				const step = this.data.step;
				const value = this.data.value;

				if ( value === max || value + step > max ) {
					return true;
				}

				return false;
			},
			isSubtractDisabled() {
				const min = this.data.min;
				const step = this.data.step;
				const value = this.data.value;

				if ( value === min || value - step < min ) {
					return true;
				}

				return false;
			},
		},
		config() {
			this.data.value = Number( this.data.value ) || 0;
			this.data.step = Number( this.data.step ) || 1;
			this.data.min = typeof this.data.min === 'undefined' ? -Infinity : Number( this.data.min );
			this.data.max = typeof this.data.max === 'undefined' ? Infinity : Number( this.data.max );
		},
		onSubtract() {
			if ( this.data.disabled ) {
				return;
			}

			const value = this.data.value;
			const step = this.data.step;
			const min = this.data.min;
			const max = this.data.max;

			const newValue = value - step;

			if ( !isValid( newValue, min, max ) ) {
				return;
			}

			this.$refs.input.value = newValue;
			this.data.value = newValue;
			this.$emit( 'change', newValue );
		},
		onAdd() {
			if ( this.data.disabled ) {
				return;
			}

			const value = this.data.value;
			const step = this.data.step;
			const min = this.data.min;
			const max = this.data.max;

			const newValue = value + step;

			if ( !isValid( newValue, min, max ) ) {
				return;
			}

			this.$refs.input.value = newValue;
			this.data.value = newValue;
			this.$emit( 'change', newValue );
		},
		onInput() {
			const $input = this.$refs.input;

			if ( $input.value === '' ) {
				return;
			}

			const newValue = Number( $input.value );

			// invalid input
			if ( isNaN( newValue ) ) {
				return;
			}

			this.data.value = newValue;
			this.$emit( 'change', newValue );
		},
	};

	function isValid( value, min, max ) {
		return value >= min && value <= max;
	}
</script>
